// Generated by Xata Codegen 0.21.0. Please do not edit.
import { buildClient } from "@xata.io/client";
import type {
  BaseClientOptions,
  SchemaInference,
  XataRecord,
} from "@xata.io/client";

const tables = [
  {
    name: "users",
    columns: [
      { name: "email", type: "email", unique: true },
      { name: "username", type: "string" },
    ],
  },
  {
    name: "days",
    columns: [
      {
        name: "date",
        type: "datetime",
        notNull: true,
        defaultValue: "2000-01-01T00:00:00Z",
      },
      { name: "user", type: "link", link: { table: "users" } },
      { name: "song", type: "string" },
      { name: "log", type: "text" },
      { name: "people", type: "multiple" },
    ],
  },
] as const;

export type SchemaTables = typeof tables;
export type InferredTypes = SchemaInference<SchemaTables>;

export type Users = InferredTypes["users"];
export type UsersRecord = Users & XataRecord;

export type Days = InferredTypes["days"];
export type DaysRecord = Days & XataRecord;

export type DatabaseSchema = {
  users: UsersRecord;
  days: DaysRecord;
};

const DatabaseClient = buildClient();

const defaultOptions = {
  databaseURL:
    "https://Rami-Maalouf-s-workspace-nd1uq3.us-east-1.xata.sh/db/music-journal",
};

export class XataClient extends DatabaseClient<DatabaseSchema> {
  constructor(options?: BaseClientOptions) {
    super({ ...defaultOptions, ...options }, tables);
  }
}

let instance: XataClient | undefined = undefined;

export const getXataClient = () => {
  if (instance) return instance;

  instance = new XataClient();
  return instance;
};
